{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4a57004-9516-4df2-b532-edd06c04cf51",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Load customers.json\n",
    "with open('customers.json', 'r') as file:\n",
    "    customers_data = json.load(file)\n",
    "customers_df = pd.DataFrame(customers_data)\n",
    "\n",
    "# Load transaction_logs.json\n",
    "with open('transaction_logs.json', 'r') as file:\n",
    "    transaction_logs_data = json.load(file)\n",
    "transaction_logs_df = pd.DataFrame(transaction_logs_data)\n",
    "\n",
    "# Check the first few rows of each DataFrame\n",
    "print(customers_df.head())\n",
    "print(transaction_logs_df.head())\n",
    "\n",
    "# Summary of the data\n",
    "print(customers_df.info())\n",
    "print(transaction_logs_df.info())\n",
    "\n",
    "# Data types and column names\n",
    "print(customers_df.dtypes)\n",
    "print(transaction_logs_df.dtypes)\n",
    "\n",
    "# Describe numerical and categorical columns\n",
    "print(customers_df.describe(include='all'))\n",
    "print(transaction_logs_df.describe(include='all'))\n",
    "\n",
    "# Identify key columns in each DataFrame\n",
    "print(\"Customer Data Columns:\", customers_df.columns.tolist())\n",
    "print(\"Transaction Logs Columns:\", transaction_logs_df.columns.tolist())\n",
    "\n",
    "# Check for missing values\n",
    "print(customers_df.isnull().sum())\n",
    "print(transaction_logs_df.isnull().sum())\n",
    "\n",
    "# Sample data for visualization\n",
    "data = pd.DataFrame({\n",
    "    'Category': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C'],\n",
    "    'Values': [10, 12, 50, 13, 15, 16, 10, 10, 12]  # Assume 50 is an outlier\n",
    "})\n",
    "\n",
    "# Function to highlight outliers\n",
    "def highlight_outliers(data, column):\n",
    "    Q1 = data[column].quantile(0.25)\n",
    "    Q3 = data[column].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    lower_bound = Q1 - 1.5 * IQR\n",
    "    upper_bound = Q3 + 1.5 * IQR\n",
    "    data['Outlier'] = (data[column] < lower_bound) | (data[column] > upper_bound)\n",
    "    return data\n",
    "\n",
    "# Highlight outliers in the data\n",
    "highlighted_data = highlight_outliers(data, 'Values')\n",
    "\n",
    "# Add hue to differentiate between normal values and outliers\n",
    "highlighted_data['Hue'] = highlighted_data['Outlier'].map({True: 'Outlier', False: 'Normal'})\n",
    "\n",
    "# Calculate additional statistics\n",
    "category_stats = highlighted_data.groupby('Category')['Values'].agg(['mean', 'std']).reset_index()\n",
    "\n",
    "# Create the bar graph with highlighted outliers\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.barplot(x='Category', y='Values', hue='Hue', data=highlighted_data,\n",
    "            palette={'Normal': '#1f77b4', 'Outlier': '#ff7f0e'}, errorbar=None, dodge=False)\n",
    "\n",
    "# Annotate each bar with values\n",
    "for index, row in highlighted_data.iterrows():\n",
    "    plt.text(index, row['Values'] + 0.5, f\"{round(row['Values'], 2)}\\n\", \n",
    "             color='black', ha=\"center\", fontsize=10)\n",
    "\n",
    "# Annotate with mean and std deviation\n",
    "for index, row in category_stats.iterrows():\n",
    "    plt.text(index, row['mean'] + 5, f\"Mean: {round(row['mean'], 2)}\\nStd: {round(row['std'], 2)}\", \n",
    "             color='blue', ha=\"center\", fontsize=10)\n",
    "\n",
    "# Add title and labels\n",
    "plt.title('Bar Graph with Outliers Highlighted', fontsize=20)\n",
    "plt.suptitle('This graph highlights outliers within each category, with additional statistics for context.', fontsize=12, y=0.92)\n",
    "plt.ylabel('Values', fontsize=14)\n",
    "plt.xlabel('Category', fontsize=14)\n",
    "\n",
    "# Enhance the grid and spines\n",
    "plt.grid(True, linestyle='--', alpha=0.6)\n",
    "sns.despine()\n",
    "\n",
    "# Add a legend\n",
    "plt.legend(title='Value Type')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
